heat_template_version: 2021-04-16

parameters:
  name:
    type: string
  image:
    type: string
  flavor:
    type: string
    constraints:
      - custom_constraint: nova.flavor
  key_name:
    type: string
  network_id:
    type: string
  subnet_id:
    type: string
  public_network:
    type: string
    default: "public"
  create_floating_ip:
    type: boolean
    default: false
  volumes:
    type: number
    default: 0
  volume_size:
    type: number
    default: 32
  software_config:
    type: string
    default: ""
  lb_pool_id:
    type: string
    default: ""
  

conditions:
  use_volumes: { not: { equals: [{ get_param: volumes }, 0] } }
  use_software_config: { not: { equals: [{ get_param: software_config }, ""] } }
  use_lb_pool: { not: { equals: [{ get_param: lb_pool_id }, ""] } }
  use_floating_ip: { equals: [{ get_param: create_floating_ip }, true] }

resources:
  node:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: node_port }
      user_data_format: { if: [use_software_config, SOFTWARE_CONFIG] }
      user_data: { if: [use_software_config, { get_param: software_config }] }
      tags:
        - str_replace:
            template: "stack_id=%id%"
            params:
              "%id%": { get_param: OS::stack_id }

  node_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: network_id }
      fixed_ips:
        - subnet_id: { get_param: subnet_id }

  node_floating_ip:
    type: OS::Neutron::FloatingIP
    condition: use_floating_ip
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: node_port }

  node_volume:
    type: OS::Heat::ResourceGroup
    condition: use_volumes
    properties:
      count: { get_param: volumes }
      resource_def:
        type: Custom::NodeVolume
        properties:
          size: { get_param: volume_size }
          node_uuid: { get_resource: node }

  lb_member:
    type: OS::Octavia::PoolMember
    condition: use_lb_pool
    properties:
      pool: { get_param: lb_pool_id }
      address: { get_attr: [node, first_address] }
      protocol_port: 6443
      subnet: { get_param: subnet_id }

outputs:
  OS::stack_id:
    value: { get_resource: node }
  first_address:
    value: { get_attr: [node, first_address] }
  floating_ip_address:
    condition: use_floating_ip
    value: { get_attr: [node_floating_ip, floating_ip_address] }