heat_template_version: 2021-04-16

parameters:
  name:
    type: string
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    default: "Ubuntu 21.04"
  flavor:
    type: string
    default: a3.xlarge
    constraints:
      - custom_constraint: nova.flavor
  network_id:
    type: string
  public_network:
    type: string
    default: "public"
  subnet_id:
    type: string
    default: ""
  certificate_key:
    type: string
  control_plane_ip:
    type: string
  lb_pool_id:
    type: string

resources:     
  control_plane:
    type: Custom::Node
    properties:
      name: 
        str_replace:
          template: "%name%-control-plane"
          params:
            "%name%": { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      network_id: { get_param: network_id }
      subnet_id: { get_param: subnet_id }
      key_name: { get_param: key_name }
      software_config: { get_resource: kubeadm_config }
      lb_pool_id: { get_param: lb_pool_id }
      public_network: { get_param: public_network }
      create_floating_ip: true

  kubeconfig_handle:
    type: OS::Heat::WaitConditionHandle
  kubeconfig_wc:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: kubeconfig_handle }
      count: 1
      timeout: 300
  token_handle:
    type: OS::Heat::WaitConditionHandle
  token_wc:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: token_handle }
      count: 1
      timeout: 300
  cert_hash_handle:
    type: OS::Heat::WaitConditionHandle
  cert_hash_wc:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: cert_hash_handle }
      count: 1
      timeout: 300

  kubeadm_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash -x

            apt update && apt -y upgrade

            cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
            br_netfilter
            EOF

            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF

            sudo sysctl --system
            modprobe br_netfilter
            echo 1 > /proc/sys/net/ipv4/ip_forward

            apt install -y apt-transport-https ca-certificates curl jq
            curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
            apt update
            apt install -y containerd
            echo 'KUBELET_EXTRA_ARGS="--v=6 --add-dir-header=true"' > /etc/default/kubelet
            apt install -y kubelet kubeadm kubectl

            cat <<EOF > kubeadm.conf
            ---
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: InitConfiguration
            certificateKey: %certificate_key%
            nodeRegistration:
              criSocket: /var/run/containerd/containerd.sock
              kubeletExtraArgs:
                cloud-provider: "external"
                v: "6"
                add-dir-header: "true"
            ---
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: ClusterConfiguration
            kubernetesVersion: v1.22.3
            controlPlaneEndpoint: %control_plane_ip%:6443
            certificatesDir: /etc/kubernetes/pki
            clusterName: kubernetes
            etcd:
              local:
                dataDir: /var/lib/etcd
            imageRepository: k8s.gcr.io
            networking:
              podSubnet: 10.244.0.0/16
              serviceSubnet: 10.43.0.0/16
              dnsDomain: cluster.local
            apiServer:
              extraArgs: 
                cloud-provider: "external"
                v: "6"
                add-dir-header: "true"
            controllerManager:
              extraArgs:
                cloud-provider: "external"
                v: "6"
                add-dir-header: "true"
            scheduler:
              extraArgs:
                v: "6"
                add-dir-header: "true"
            EOF

            kubeadm init --config=kubeadm.conf --upload-certs
            KUBECONFIG=/etc/kubernetes/admin.conf kubectl -n kube-system patch daemonset kube-proxy -p '{"spec":{"template":{"spec":{"containers":[{"name":"kube-proxy","args":["--v=6","--add-dir-header"]}]}}}}'

            KUBECONFIG=/etc/kubernetes/admin.conf kubectl -n kube-system patch daemonset kube-proxy -p '{"spec":{"template":{"spec":{"containers":[{"name":"kube-proxy","args":["--v=6","--add-dir-header=true"]}]}}}}'
            KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

            wc_notify_token --data $(TOKEN=$(kubeadm token create) jq -Mcn '{"status": "SUCCESS", "data": env.TOKEN}')
            wc_notify_kc --data $(KC=$(cat /etc/kubernetes/admin.conf | sed 's|https://.*:6443|https://%control_plane_ip%:6443|' | base64 -w0) jq -Mcn '{"status": "SUCCESS", "data": env.KC}')
            wc_notify_cert_hash --data $(HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //') jq -Mcn '{"status": "SUCCESS", "data": env.HASH}')
          params:
            "%control_plane_ip%": { get_param: control_plane_ip }
            "%certificate_key%": { get_param: certificate_key }
            wc_notify_token: { get_attr: [token_handle, curl_cli] }
            wc_notify_cert_hash: { get_attr: [cert_hash_handle, curl_cli] }
            wc_notify_kc: { get_attr: [kubeconfig_handle, curl_cli] }

outputs:
  node_id:
    value: { get_resource: control_plane }
  token:
    value: { get_attr: [token_wc, data] }
  cert_hash:
    value: { get_attr: [cert_hash_wc, data] }
  kubeconfig:
    value: { get_attr: [kubeconfig_wc, data] }
  internal_ip:
    value: { get_attr: [control_plane, first_address] }
  access_ip:
    value: { get_attr: [control_plane, floating_ip_address] }