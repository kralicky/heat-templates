heat_template_version: 2021-04-16

description: Creates an unprovisioned set of servers in an isolated VPC

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: joe
  control_plane_image:
    type: string
    default: "Ubuntu 21.04"
  agent_image:
    type: string
    default: "Ubuntu 21.04"
  vgpu_image:
    type: string
    default: "Ubuntu 20.04"
  control_plane_flavor:
    type: string
    default: a3.2xlarge
    constraints:
      - custom_constraint: nova.flavor
  agent_flavor:
    type: string
    default: a3.4xlarge
    constraints:
      - custom_constraint: nova.flavor
  vgpu_flavor:
    type: string
    default: v4.xlarge
    constraints:
      - custom_constraint: nova.flavor
  public_net:
    type: string
    default: "public"
  num_workers:
    type: number
    default: 7
  num_vgpu:
    type: number
    default: 1
  ha:
    type: boolean
    default: false
  vgpu_flavor:
    type: string
    default: v4.xlarge
    constraints:
      - custom_constraint: nova.flavor
  dns_nameserver:
    type: string
    description: DNS nameserver to use for private network
    default: "10.200.128.5"

conditions:
  ha: { get_param: ha }

resources:
  private_network:
    type: Custom::PrivateNetwork
    properties:
      dns_nameserver: { get_param: dns_nameserver }

  control_plane:
    type: Clusters::Kubeadm::ControlPlane
    condition: { not: { get_param: ha } }
    properties:
      name: { get_param: OS::stack_name }
      image: { get_param: control_plane_image }
      flavor: { get_param: control_plane_flavor }
      key_name: { get_param: key_name }
      network_id: { get_attr: [private_network, network_id] }
      subnet_id: { get_attr: [private_network, subnet_id] }

  control_plane_ha:
    type: Clusters::Kubeadm::HAControlPlane
    condition: { get_param: ha }
    properties:
      name: { get_param: OS::stack_name }
      image: { get_param: control_plane_image }
      flavor: { get_param: control_plane_flavor }
      key_name: { get_param: key_name }
      public_net: { get_param: public_net }
      network_id: { get_attr: [private_network, network_id] }
      subnet_id: { get_attr: [private_network, subnet_id] }
      additional_nodes: 2

  kubeadm_worker_config:
    type: Clusters::Kubeadm::WorkerConfig
    properties:
      control_plane_ip: { if: [ha, { get_attr: [control_plane_ha, control_plane_ip] }, { get_attr: [control_plane, internal_ip] }] }
      token: { if: [ha, { get_attr: [control_plane_ha, token] }, { get_attr: [control_plane, token] }] }
      cert_hash: { if: [ha, { get_attr: [control_plane_ha, cert_hash] }, { get_attr: [control_plane, cert_hash] }] }

  # agents
  agents_group:
    type: Custom::NodeGroup
    properties:
      name: 
        str_replace:
          template: "%name%-worker-%index%"
          params:
            "%name%": { get_param: OS::stack_name }
      count: { get_param: num_workers }
      image: { get_param: agent_image }
      flavor: { get_param: agent_flavor }
      key_name: { get_param: key_name }
      network_id: { get_attr: [private_network, network_id] }
      subnet_id: { get_attr: [private_network, subnet_id] }
      volumes: 1
      volume_size: 128
      software_config: { get_resource: kubeadm_worker_config }

  # vGPUs
  vgpu_group:
    type: Custom::NodeGroup
    properties:
      name:
        str_replace:
          template: "%name%-vgpu-%index%"
          params:
            "%name%": { get_param: OS::stack_name }
      count: { get_param: num_vgpu }
      image: { get_param: vgpu_image }
      flavor: { get_param: vgpu_flavor }
      key_name: { get_param: key_name }
      network_id: { get_attr: [private_network, network_id] }
      subnet_id: { get_attr: [private_network, subnet_id] }
      volumes: 0
      software_config: { get_resource: kubeadm_worker_config }

outputs:
  control_plane_ip:
    value: { if: [ha, { get_attr: [control_plane_ha, control_plane_ip] }, { get_attr: [control_plane, floating_ip] }] }
  access_ip:
    value: { if: [ha, { get_attr: [control_plane_ha, access_ip] }, { get_attr: [control_plane, floating_ip] }] }
  kubeconfig:
    value: { if: [ha, { get_attr: [control_plane_ha, kubeconfig] }, { get_attr: [control_plane, kubeconfig] }] }
  worker_ids:
    value: { get_attr: [agents_group, node_ids] }
  vgpu_ids:
    value: { get_attr: [vgpu_group, node_ids] }
  control_plane_id:
    value: { if: [ha, { get_attr: [control_plane_ha, node_id] }, { get_attr: [control_plane, node_id] }] }
  private_network_id:
    value: { get_attr: [private_network, network_id] }
  private_subnet_id:
    value: { get_attr: [private_network, subnet_id] }
